- name: gather hardware facts
  ansible.builtin.setup:
    gather_subset:
      - hardware

- name: Gather the list of mounted devices
  ansible.builtin.shell:
    cmd: >
      lsblk --list --noheadings --output MOUNTPOINT,NAME 
      | awk '/^\//{print $2}'
      | awk '/^sd/{print $1}'
      | awk '{sub(/[0-9]+/, "", $(NF-1)); print }'
      | uniq
  register: mounted_disks
  changed_when: False

- name: Gather the list of all devices
  ansible.builtin.shell:
    cmd: >
      lsblk --list --noheadings --output NAME
      | awk '/^sd/{print $1}' 
      | awk '{sub(/[0-9]+/, "", $(NF-1)); print }'
      | uniq
  register: all_disks
  changed_when: False

- name: Calculate the unused devices
  set_fact:
    unused_disks: "{{ all_disks.stdout_lines | difference(mounted_disks.stdout_lines) }}"

- name: debug
  ansible.builtin.debug:
    var: mounted_disks.stdout_lines

- name: debug
  ansible.builtin.debug:
    var: all_disks.stdout_lines

- name: debug
  ansible.builtin.debug:
    var: unused_disks

- name: partition disks
  community.general.parted:
    device: "/dev/{{ item }}"
    number: 1
    state: present
    label: gpt
    name: data
    resize: true
  loop: "{{ unused_disks }}"

- name: create filesystem
  community.general.filesystem:
    fstype: "{{ data_filesystem }}"
    dev: "/dev/{{ item }}1"
  loop: "{{ unused_disks }}"

- name: mount data volumes
  ansible.posix.mount:
    src: "/dev/{{ item }}1"
    path: "{{ crdb_folder }}/data{{ index }}"
    opts: defaults
    state: mounted
    fstype: "{{ data_filesystem }}"
  loop: "{{ unused_disks }}"
  loop_control:
    index_var: index

- name: get data volumes
  ansible.builtin.shell:
    cmd: >
      lsblk --list --noheadings --output MOUNTPOINT
      | grep -i {{ crdb_folder }}
  register: mounted_data_disks

- name: set data disk variable
  ansible.builtin.set_fact:
    crdb_data_disks: "{{ mounted_data_disks.stdout }}"

- name: list mounted data disks
  ansible.builtin.debug:
    var: "{{ crdb_data_disks }}"
